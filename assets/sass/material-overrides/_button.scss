$im-button-height: 35px;
$im-button-horizontal-padding: 25px;
$mat-button-border-radius: 20px !default;
$im-button-horizontal-margin: 10px;

// We use .im-app class to override the default angular styling
.im-app {
  .mat-button, .mat-flat-button, .mat-icon-button, .mat-stroked-button {
    height: $im-button-height;
    padding: 0 $im-button-horizontal-padding 0 $im-button-horizontal-padding;
    margin-right: $im-button-horizontal-margin;
  }

  .mat-button {
    text-transform: uppercase;

    .mat-icon {
      margin-right: 10px;
    }
  }
}

@mixin button-theme-alteration($theme, $palette-name) {
  $palette: map-get($theme, $palette-name);

  $default-color: mat-color($palette, default);
  $hover-color: mat-color($palette, 500);
  $active-color: mat-color($palette, 700);

  .mat-button:not([disabled]) {

    &:hover {
      color: red;//$default-color;
    }
    &:active {
      color: $active-color;
    }
  }


  .mat-#{$palette-name} {
    &.mat-button, &.mat-flat-button, &.mat-icon-button {

        &:hover {
          background-color: $hover-color;
        }
        &:active {
          background-color: $active-color;
        }
      }

      &.mat-stroked-button:not([disabled]) {
        border-color: $default-color;

        &:hover {
          border-color: $hover-color;
          color: $hover-color;
        }
        &:active {
          border-color: $active-color;
          color: $active-color;
        }

      }
    }

}

@mixin im-button-theme($theme) {
  $primary: map-get($theme, primary);
  $accent: map-get($theme, accent);
  $warn: map-get($theme, warn);
  $background: map-get($theme, background);
  $foreground: map-get($theme, foreground);

  $hover-color: mat-color($primary, 600);
  $active-color: mat-color($primary, 700);

  .im-app {
    @include button-theme-alteration($theme, 'primary');
    @include button-theme-alteration($theme, 'accent');

    .mat-button:not([disabled]) {
      color: mat-color($primary, A100);

      &:hover {
        color: $hover-color;
      }
      &:active {
        color: $active-color;
      }

      .mat-button-focus-overlay {

        background-color: transparent;
        &:hover {
          background-color: transparent;
        }
      }
    }
  }
}




//DEFAULT ANGULAR BUTTON THEMEING INCLUDED HERE FOR REFERENCE ONLY
//
//
//$_mat-button-ripple-opacity: 0.1;
//
//// Applies a focus style to an mat-button element for each of the supported palettes.
//@mixin _mat-button-focus-overlay-color($theme) {
//  $primary: map-get($theme, primary);
//  $accent: map-get($theme, accent);
//  $warn: map-get($theme, warn);
//
//  &.mat-primary .mat-button-focus-overlay {
//    background-color: mat-color($primary);
//  }
//
//  &.mat-accent .mat-button-focus-overlay {
//    background-color: mat-color($accent);
//  }
//
//  &.mat-warn .mat-button-focus-overlay {
//    background-color: mat-color($warn);
//  }
//
//  &[disabled] .mat-button-focus-overlay {
//    background-color: transparent;
//  }
//}
//
//// Applies the background color for a ripple. If the value provided is not a Sass color,
//// we assume that we've been given a CSS variable. Since we can't perform alpha-blending
//// on a CSS variable, we instead add the opacity directly to the ripple element.
//@mixin _mat-button-ripple-background($palette, $hue, $opacity) {
//  $background-color: mat-color($palette, $hue, $opacity);
//  background-color: $background-color;
//  @if (type-of($background-color) != color) {
//    opacity: $opacity;
//  }
//}
//
//@mixin _mat-button-ripple-color($theme, $hue, $opacity: $_mat-button-ripple-opacity) {
//  $primary: map-get($theme, primary);
//  $accent: map-get($theme, accent);
//  $warn: map-get($theme, warn);
//
//  &.mat-primary .mat-ripple-element {
//    @include _mat-button-ripple-background($primary, $hue, $opacity);
//  }
//
//  &.mat-accent .mat-ripple-element {
//    @include _mat-button-ripple-background($accent, $hue, $opacity);
//  }
//
//  &.mat-warn .mat-ripple-element {
//    @include _mat-button-ripple-background($warn, $hue, $opacity);
//  }
//}
//
//// Applies a property to an mat-button element for each of the supported palettes.
//@mixin _mat-button-theme-property($theme, $property, $hue) {
//  $primary: map-get($theme, primary);
//  $accent: map-get($theme, accent);
//  $warn: map-get($theme, warn);
//  $background: map-get($theme, background);
//  $foreground: map-get($theme, foreground);
//
//  &.mat-primary {
//    #{$property}: mat-color($primary, $hue);
//  }
//  &.mat-accent {
//    #{$property}: mat-color($accent, $hue);
//  }
//  &.mat-warn {
//    #{$property}: mat-color($warn, $hue);
//  }
//
//  &.mat-primary, &.mat-accent, &.mat-warn, &[disabled] {
//    &[disabled] {
//      $palette: if($property == 'color', $foreground, $background);
//      #{$property}: mat-color($palette, disabled-button);
//    }
//  }
//}
//
//@mixin mat-button-theme($theme) {
//  $primary: map-get($theme, primary);
//  $accent: map-get($theme, accent);
//  $warn: map-get($theme, warn);
//  $background: map-get($theme, background);
//  $foreground: map-get($theme, foreground);
//
//  .mat-button, .mat-icon-button, .mat-stroked-button {
//    // Buttons without a background color should inherit the font color. This is necessary to
//    // ensure that the button is readable on custom background colors. It's wrong to always assume
//    // that those buttons are always placed inside of containers with the default background
//    // color of the theme (e.g. themed toolbars).
//    color: inherit;
//    background: transparent;
//
//    @include _mat-button-theme-property($theme, 'color', text);
//    @include _mat-button-focus-overlay-color($theme);
//
//    // Setup the ripple color to be based on the text color. This ensures that the ripples
//    // are matching with the current theme palette and are in contrast to the background color
//    // (e.g in themed toolbars).
//    .mat-ripple-element {
//      opacity: $_mat-button-ripple-opacity;
//      background-color: currentColor;
//    }
//  }
//
//  .mat-button-focus-overlay {
//    background: map_get($foreground, base);
//  }
//
//  // Note: this needs a bit extra specificity, because we're not guaranteed the inclusion
//  // order of the theme styles and the button reset may end up resetting this as well.
//  .mat-stroked-button:not([disabled]) {
//    border-color: mat-color($foreground, divider);
//  }
//
//  .mat-flat-button, .mat-raised-button, .mat-fab, .mat-mini-fab {
//    // Default font and background color when not using any color palette.
//    color: mat-color($foreground, text);
//    background-color: mat-color($background, raised-button);
//
//    @include _mat-button-theme-property($theme, 'color', default-contrast);
//    @include _mat-button-theme-property($theme, 'background-color', default);
//    @include _mat-button-ripple-color($theme, default-contrast);
//  }
//
//  .mat-stroked-button, .mat-flat-button {
//    @include _mat-theme-overridable-elevation(0, $theme);
//  }
//
//  .mat-raised-button {
//    @include _mat-theme-overridable-elevation(2, $theme);
//
//    &:not([disabled]):active {
//      @include _mat-theme-overridable-elevation(8, $theme);
//    }
//
//    &[disabled] {
//      @include _mat-theme-overridable-elevation(0, $theme);
//    }
//  }
//
//  .mat-fab, .mat-mini-fab {
//    @include _mat-theme-overridable-elevation(6, $theme);
//
//    &:not([disabled]):active {
//      @include _mat-theme-overridable-elevation(12, $theme);
//    }
//
//    &[disabled] {
//      @include _mat-theme-overridable-elevation(0, $theme);
//    }
//  }
//}
//
//@mixin mat-button-typography($config) {
//  .mat-button, .mat-raised-button, .mat-icon-button, .mat-stroked-button,
//  .mat-flat-button, .mat-fab, .mat-mini-fab {
//    font: {
//      family: mat-font-family($config, button);
//      size: mat-font-size($config, button);
//      weight: mat-font-weight($config, button);
//    }
//  }
//}
//
//
//
//
//
//
//@mixin mat-button-toggle-theme($theme) {
//  $foreground: map-get($theme, foreground);
//  $background: map-get($theme, background);
//  $divider-color: mat-color($foreground, divider);
//
//  .mat-button-toggle-standalone,
//  .mat-button-toggle-group {
//    @include _mat-theme-elevation(2, $theme);
//  }
//
//  .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,
//  .mat-button-toggle-group-appearance-standard {
//    box-shadow: none;
//  }
//
//  .mat-button-toggle {
//    color: mat-color($foreground, hint-text);
//
//    .mat-button-toggle-focus-overlay {
//      background-color: mat-color($background, focused-button);
//    }
//  }
//
//  .mat-button-toggle-appearance-standard {
//    color: mat-color($foreground, text);
//    background: mat-color($background, card);
//
//    .mat-button-toggle-focus-overlay {
//      background-color: mat-color($background, focused-button, 1);
//    }
//  }
//
//  .mat-button-toggle-group-appearance-standard .mat-button-toggle + .mat-button-toggle {
//    border-left: solid 1px $divider-color;
//  }
//
//  [dir='rtl'] .mat-button-toggle-group-appearance-standard .mat-button-toggle + .mat-button-toggle {
//    border-left: none;
//    border-right: solid 1px $divider-color;
//  }
//
//  .mat-button-toggle-group-appearance-standard.mat-button-toggle-vertical {
//    .mat-button-toggle + .mat-button-toggle {
//      border-left: none;
//      border-right: none;
//      border-top: solid 1px $divider-color;
//    }
//  }
//
//  .mat-button-toggle-checked {
//    background-color: mat-color($background, selected-button);
//    color: mat-color($foreground, secondary-text);
//
//    &.mat-button-toggle-appearance-standard {
//      color: mat-color($foreground, text);
//    }
//  }
//
//  .mat-button-toggle-disabled {
//    color: mat-color($foreground, disabled-button);
//    background-color: mat-color($background, disabled-button-toggle);
//
//    &.mat-button-toggle-appearance-standard {
//      background: mat-color($background, card);
//    }
//
//    &.mat-button-toggle-checked {
//      background-color: mat-color($background, selected-disabled-button);
//    }
//  }
//
//  .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,
//  .mat-button-toggle-group-appearance-standard {
//    border: solid 1px $divider-color;
//  }
//}
//
//@mixin mat-button-toggle-typography($config) {
//  .mat-button-toggle {
//    font-family: mat-font-family($config);
//  }
//}
//


